// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/rinosukmandityo/login-jwt"
)

// Ensure, that UserRepositoryMock does implement login.UserRepository.
// If this is not the case, regenerate this file with moq.
var _ login.UserRepository = &UserRepositoryMock{}

// UserRepositoryMock is a mock implementation of login.UserRepository.
//
//	func TestSomethingThatUsesUserRepository(t *testing.T) {
//
//		// make and configure a mocked login.UserRepository
//		mockedUserRepository := &UserRepositoryMock{
//			FindByEmailFunc: func(ctx context.Context, email string) (*login.User, error) {
//				panic("mock out the FindByEmail method")
//			},
//		}
//
//		// use mockedUserRepository in code that requires login.UserRepository
//		// and then make assertions.
//
//	}
type UserRepositoryMock struct {
	// FindByEmailFunc mocks the FindByEmail method.
	FindByEmailFunc func(ctx context.Context, email string) (*login.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// FindByEmail holds details about calls to the FindByEmail method.
		FindByEmail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Email is the email argument value.
			Email string
		}
	}
	lockFindByEmail sync.RWMutex
}

// FindByEmail calls FindByEmailFunc.
func (mock *UserRepositoryMock) FindByEmail(ctx context.Context, email string) (*login.User, error) {
	if mock.FindByEmailFunc == nil {
		panic("UserRepositoryMock.FindByEmailFunc: method is nil but UserRepository.FindByEmail was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Email string
	}{
		Ctx:   ctx,
		Email: email,
	}
	mock.lockFindByEmail.Lock()
	mock.calls.FindByEmail = append(mock.calls.FindByEmail, callInfo)
	mock.lockFindByEmail.Unlock()
	return mock.FindByEmailFunc(ctx, email)
}

// FindByEmailCalls gets all the calls that were made to FindByEmail.
// Check the length with:
//
//	len(mockedUserRepository.FindByEmailCalls())
func (mock *UserRepositoryMock) FindByEmailCalls() []struct {
	Ctx   context.Context
	Email string
} {
	var calls []struct {
		Ctx   context.Context
		Email string
	}
	mock.lockFindByEmail.RLock()
	calls = mock.calls.FindByEmail
	mock.lockFindByEmail.RUnlock()
	return calls
}
